"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.joiPassword = void 0;
const joi = __importStar(require("joi"));
exports.joiPassword = joi.extend((joi) => {
    return {
        type: 'string',
        base: joi.string(),
        messages: {
            'password.minOfUppercase': '{#label} should contain at least {#min} uppercase character',
            'password.minOfSpecialCharacters': '{#label} should contain at least {#min} special character',
            'password.minOfLowercase': '{#label} should contain at least {#min} lowercase character',
            'password.minOfNumeric': '{#label} should contain at least {#min} numeric character',
            'password.noWhiteSpaces': '{#label} should not contain white spaces',
            // 'password.notIncludeWith': '{#label} should not include {#field}',
        },
        rules: {
            minOfUppercase: {
                method(min) {
                    return this.$_addRule({
                        name: 'minOfUppercase',
                        args: { min },
                    });
                },
                args: [
                    {
                        name: 'min',
                        assert: (value) => typeof value === 'number' && !isNaN(value),
                        message: 'must be a number',
                    },
                ],
                validate: (value, helpers, { min = 0 }) => {
                    if (!new RegExp(`(?=(.*[A-Z]){${min}})`).test(value))
                        return helpers.error('password.minOfUppercase', { min });
                    return value;
                },
            },
            minOfLowercase: {
                method(min) {
                    return this.$_addRule({
                        name: 'minOfLowercase',
                        args: { min },
                    });
                },
                args: [
                    {
                        name: 'min',
                        assert: (value) => typeof value === 'number' && !isNaN(value),
                        message: 'must be a number',
                    },
                ],
                validate: (value, helpers, { min = 0 }) => {
                    if (!new RegExp(`(?=(.*[a-z]){${min}})`).test(value))
                        return helpers.error('password.minOfLowercase', { min });
                    return value;
                },
            },
            minOfSpecialCharacters: {
                method(min) {
                    return this.$_addRule({
                        name: 'minOfSpecialCharacters',
                        args: { min },
                    });
                },
                args: [
                    {
                        name: 'min',
                        assert: (value) => typeof value === 'number' && !isNaN(value),
                        message: 'must be a number',
                    },
                ],
                validate: (value, helpers, { min = 0 }) => {
                    const numSpecial = value.length - (value.match(/[a-zA-Z0-9]/g) || []).length;
                    if (numSpecial < min)
                        return helpers.error('password.minOfSpecialCharacters', {
                            min,
                        });
                    return value;
                },
            },
            minOfNumeric: {
                method(min) {
                    return this.$_addRule({
                        name: 'minOfNumeric',
                        args: { min },
                    });
                },
                args: [
                    {
                        name: 'min',
                        assert: (value) => typeof value === 'number' && !isNaN(value),
                        message: 'must be a number',
                    },
                ],
                validate: (value, helpers, { min = 0 }) => {
                    if (!new RegExp(`(?=(.*[0-9]){${min}})`, 'g').test(value))
                        return helpers.error('password.minOfNumeric', { min });
                    return value;
                },
            },
            noWhiteSpaces: {
                validate: (value, helpers) => {
                    if (new RegExp(` `, 'g').test(value))
                        return helpers.error('password.noWhiteSpaces');
                    return value;
                },
            },
            // notIncludeWith: {
            //       method(fields: string[]) {
            //             return this.$_addRule({
            //                   name: 'notIncludeWith',
            //                   args: { fields },
            //             });
            //       },
            //       args: [
            //             {
            //                   name: 'fields',
            //                   assert: (value) => value && Array.isArray(value),
            //                   message: 'must be an array of string',
            //             },
            //       ],
            //       validate: (
            //             value: string,
            //             helpers: joi.CustomHelpers,
            //             { fields = [] }: { fields: string[] },
            //       ) => {
            //             const objectValue: Record<string, string> = helpers.state?.ancestors[0];
            //             if (objectValue) {
            //                   const isIncludes = fields.filter((item) => {
            //                         return (
            //                               Object.keys(objectValue).includes(item) &&
            //                               Boolean(
            //                                     objectValue[item]
            //                                           .split(' ')
            //                                           .filter((item2) => item2.includes(value)).length,
            //                               )
            //                         );
            //                   });
            //                   if (Boolean(isIncludes.length)) {
            //                         return helpers.error('password.notIncludeWith', { field: isIncludes[0] });
            //                   }
            //             }
            //             return value;
            //       },
            // },
        },
    };
});
